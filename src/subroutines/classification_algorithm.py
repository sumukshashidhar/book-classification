"""
The primary classification algorithm for the genre classifier.

Author: Sumuk Shashidhar (sumuks2@illinois.edu)
Date Revised: Monday 12th September 2022
"""
# the typing module, for specifying function arguments and return types
from typing import Dict, List, Tuple


def evaluate_genre(description: str, keyword_list: List[Tuple[str, int]]) -> float:
    """
    For a particular genre, checks for the presence of each keyword in the description and returns a score
    according to the algorithm:

    Score = Total Keyword Occurrence * Average Point Score of Keywords
    score = n * k

    :param description: str: the description of the book
    :param keyword_list: List[Tuple[str, int]: A list of tuples, where the 1st key = keyword and 2nd = points
    :return: float: The final score for the particular genre
    """
    # running total / sum of the scores of the unique keywords
    # it's faster to do this because it prevents us from having to go back and look for the points later on
    point_scores = 0
    # count of total occurrences of keywords in the description
    total_occurrence = 0
    # count of unique occurrences of keywords in the description
    unique_occurrence = 0
    # iterate through each keyword tuple
    for keyword_tuple in keyword_list:
        # count all occurrences, and if it's non-zero, count it as a unique occurrence and add its points to the total
        keyword_occurrence = description.count(keyword_tuple[0])
        if keyword_occurrence > 0:
            unique_occurrence += 1
            point_scores += keyword_tuple[1]
            total_occurrence += keyword_occurrence
    # this is if there have been no occurrences of the genre.
    # this also prevents division by 0 in the final return statement
    if unique_occurrence == 0:
        return 0
    return total_occurrence * (point_scores / unique_occurrence)


def score(
    description: str, lookup_table: Dict[str, List[Tuple[str, int]]]
) -> Dict[str, float]:
    """
    Scores the book for multiple genres, based on the book's description and a lookup table (generated by an internal
    utility)
    :param description: str: The description of the book
    :param lookup_table: Dict[str, List[Tuple[str, int]]]: A list of keywords and scores in a dict, with the key
                                                                as the genre
    :return: Dict[str, float]: A hashmap containing the score for each genre
    """
    # set description to lowercase to avoid issues with matching
    description = description.lower()
    # make a table of scores and genres
    table = {}
    # go through each genre in the lookup table first
    for genre in lookup_table.keys():
        table[genre] = evaluate_genre(description, lookup_table[genre])
    return table
